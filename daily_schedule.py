# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'daily_schedule.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import resourcesCascade
import sqlite3
import re
import json
from datetime import datetime, timedelta

class Ui_daily_schedule(object):
    def setupUi(self, daily_schedule):
        daily_schedule.setObjectName("daily_schedule")
        daily_schedule.resize(482, 600)
        daily_schedule.setStyleSheet("background-color: rgb(37, 60, 105);")
        self.centralwidget = QtWidgets.QWidget(daily_schedule)
        self.centralwidget.setObjectName("centralwidget")
        self.bg = QtWidgets.QLabel(self.centralwidget)
        self.bg.setGeometry(QtCore.QRect(-70, -20, 1221, 801))
        self.bg.setText("")
        self.bg.setPixmap(QtGui.QPixmap(":/images/images for cascade/bg_image.png"))
        self.bg.setScaledContents(True)
        self.bg.setObjectName("bg")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(90, 0, 291, 61))
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setStyleSheet("background: transparent;\n"
"font: 21pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.label_2.setObjectName("label_2")
        
        self.nav_line = QtWidgets.QLabel(self.centralwidget)
        self.nav_line.setGeometry(QtCore.QRect(10, 60, 461, 1))
        self.nav_line.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line.setText("")
        self.nav_line.setObjectName("nav_line")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(70, 110, 331, 381))
        self.tableWidget.setStyleSheet("QTableWidget {\n"
"\n"
"    background-color: rgb(56, 47, 107);\n"
"    color: rgb(167, 145, 203);\n"
"                font-size: 17px;\n"
"gridline-color: rgb(167, 145, 203);\n"
"            }\n"
"            QHeaderView::section {\n"
"                \n"
"    background-color: rgb(56, 47, 107);\n"
"        color: rgb(167, 145, 203);\n"
"                font-size: 18px;\n"
"            }")
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(5)
        self.tableWidget.horizontalHeader().setDefaultSectionSize(162)
        self.tableWidget.verticalHeader().setDefaultSectionSize(68)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        daily_schedule.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(daily_schedule)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 482, 26))
        self.menubar.setObjectName("menubar")
        daily_schedule.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(daily_schedule)
        self.statusbar.setObjectName("statusbar")
        daily_schedule.setStatusBar(self.statusbar)
        
        # Placeholder label for no study plan message
        self.no_plan_label = QtWidgets.QLabel(self.centralwidget)
        self.no_plan_label.setGeometry(QtCore.QRect(70, 500, 331, 50))
        self.no_plan_label.setStyleSheet("background: transparent;\n"
"font: 13pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.no_plan_label.setObjectName("no_plan_label")
        self.no_plan_label.hide()

        study_plan_text, study_period, availability = self.retrieve()
        if study_plan_text is None:
            self.no_plan_label.setText("Nothing scheduled for today!")
            self.no_plan_label.show()
        else:
            self.parsing(study_plan_text, study_period, availability)

        self.retranslateUi(daily_schedule)
        QtCore.QMetaObject.connectSlotsByName(daily_schedule)

    def retranslateUi(self, daily_schedule):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon(":/images/images for cascade/dark_daily_icon.png")
        daily_schedule.setWindowIcon(icon)
        daily_schedule.setWindowTitle(_translate("daily_schedule", "Daily Schedule"))
        self.label_2.setText(_translate("daily_schedule", "Daily Schedule"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("daily_schedule", "Time Period"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("daily_schedule", "Topics"))

    def retrieve(self):
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        cursor.execute("SELECT * FROM study_plan")
        existing_plan = cursor.fetchone()
        
        if existing_plan is None:
            return None, None, None

        study_plan_text = existing_plan[1]
        study_period = existing_plan[2]
        availability = eval(existing_plan[3])
        
        conn.commit()
        conn.close()

        return study_plan_text, study_period, availability

    def parsing(self, study_plan_text, study_period, availability):
        # Extract title
        title = re.search(r'## (.+)', study_plan_text).group(1)

        # Function to parse time slots
        def parse_time_slot(slot):
            match = re.match(r'\* (.+?): (.+?) - (.+)', slot)
            if match:
                return {
                    "time_range": match.group(1).strip(),
                    "activity": f"{match.group(2).strip()} - {match.group(3).strip()}"
                }
            else:
                return None

        # Function to get the study start date from the study period
        def get_study_start_date(study_period):
            return study_period.split(' to ')[0]

        # Initialize the JSON structure
        study_plan = {
            "title": title,
            "weeks": []
        }

        # Split the text into weeks
        weeks = re.split(r'### Week \d+ \(.+?\):', study_plan_text)[1:]

        for i, week in enumerate(weeks):
            week_data = {
                "week_number": i + 1,
                "days": []
            }
            
            for day in availability:
                day_pattern = re.compile(rf'#### {day} \(.+?\):\n(.+?)(?=\n####|\Z)', re.DOTALL)
                day_match = day_pattern.search(week)
                if day_match:
                    day_data = {
                        "day": day,
                        "time_slots": []
                    }
                    time_slots_text = day_match.group(1).strip()
                    time_slots_list = re.split(r'\n+', time_slots_text)
                    for slot in time_slots_list:
                        parsed_slot = parse_time_slot(slot.strip())
                        if parsed_slot:
                            day_data["time_slots"].append(parsed_slot)
                    week_data["days"].append(day_data)
            
            study_plan["weeks"].append(week_data)

        # Calculate today's schedule
        def get_today_schedule(study_start_date, study_plan):
            today = datetime.today().date()
            start_date = datetime.strptime(study_start_date, '%B %d').replace(year=today.year).date()
            day_diff = (today - start_date).days
            if day_diff < 0 or day_diff > (len(study_plan["weeks"]) * 7):
                return None  # Outside of the study period

            week_number = (day_diff // 7) + 1
            day_of_week = today.strftime('%A')
            
            for week in study_plan["weeks"]:
                if week["week_number"] == week_number:
                    for day in week["days"]:
                        if day["day"] == day_of_week:
                            return day
            return None

        study_start_date = get_study_start_date(study_period)  # Get start date from study period

        today_schedule = get_today_schedule(study_start_date, study_plan)

        # Output today's schedule
        if today_schedule:
            self.tableWidget.clearContents()  # Clear existing content in the table
            self.tableWidget.setRowCount(len(today_schedule["time_slots"]))  # Set the number of rows based on the number of time slots
            
            for i, slot in enumerate(today_schedule["time_slots"]):
                time_range = slot['time_range']
                activity = slot['activity']
                
                # Create QTableWidgetItem for time range and activity
                time_range_item = QtWidgets.QTableWidgetItem(time_range)
                activity_item = QtWidgets.QTableWidgetItem(activity)
                
                # Set QTableWidgetItem in the table
                self.tableWidget.setItem(i, 0, time_range_item)  # Set time range in column 0
                self.tableWidget.setItem(i, 1, activity_item)
        else:
            self.tableWidget.clearContents()  # Clear existing content in the table
            self.tableWidget.setRowCount(1)  # Set a single row
            self.tableWidget.setItem(0, 0, QtWidgets.QTableWidgetItem("No study sessions scheduled for today"))
            self.tableWidget.setItem(0, 1, QtWidgets.QTableWidgetItem(""))
            self.no_plan_label.setText("No study sessions scheduled for today")
            self.no_plan_label.show()
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    daily_schedule = QtWidgets.QMainWindow()
    ui = Ui_daily_schedule()
    ui.setupUi(daily_schedule)
    daily_schedule.show()
    sys.exit(app.exec_())

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'study_plan.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import resourcesCascade
import sqlite3
from PyQt5.QtCore import QTime
import base64
import vertexai
from vertexai.generative_models import GenerativeModel, Part
import vertexai.preview.generative_models as generative_models
import re

class Ui_study_plan(object):
    def setupUi(self, study_plan):
        study_plan.setObjectName("study_plan")
        study_plan.resize(1199, 869)
        study_plan.setStyleSheet("background-color: rgb(27, 32, 81);")
        self.centralwidget = QtWidgets.QWidget(study_plan)
        self.centralwidget.setObjectName("centralwidget")
        self.bg = QtWidgets.QLabel(self.centralwidget)
        self.bg.setGeometry(QtCore.QRect(0, 0, 1221, 951))
        self.bg.setText("")
        self.bg.setPixmap(QtGui.QPixmap(":/images/images for cascade/bg_image.png"))
        self.bg.setScaledContents(True)
        self.bg.setObjectName("bg")
        self.main_title = QtWidgets.QLabel(self.centralwidget)
        self.main_title.setGeometry(QtCore.QRect(440, -10, 381, 71))
        self.main_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.main_title.setStyleSheet("background: transparent;\n"
"font: 24pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.main_title.setObjectName("main_title")
        self.select_course_title = QtWidgets.QLabel(self.centralwidget)
        self.select_course_title.setGeometry(QtCore.QRect(-10, 100, 311, 51))
        self.select_course_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.select_course_title.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.select_course_title.setObjectName("select_course_title")
        self.bg_box1 = QtWidgets.QLabel(self.centralwidget)
        self.bg_box1.setGeometry(QtCore.QRect(30, 100, 741, 141))
        self.bg_box1.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(126, 59, 115,0.5);")
        self.bg_box1.setText("")
        self.bg_box1.setObjectName("bg_box1")
        self.bg_box2 = QtWidgets.QLabel(self.centralwidget)
        self.bg_box2.setGeometry(QtCore.QRect(30, 270, 741, 141))
        self.bg_box2.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(112, 72, 163,0.5);")
        self.bg_box2.setText("")
        self.bg_box2.setObjectName("bg_box2")
        self.specify_date_title = QtWidgets.QLabel(self.centralwidget)
        self.specify_date_title.setGeometry(QtCore.QRect(40, 270, 341, 51))
        self.specify_date_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.specify_date_title.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.specify_date_title.setObjectName("specify_date_title")
        self.start_date = QtWidgets.QDateEdit(self.centralwidget)
        self.start_date.setGeometry(QtCore.QRect(130, 356, 110, 22))
        self.start_date.setStyleSheet("font: 7pt \"Montserrat\";\n"
"background-color: rgb(50, 24, 92);\n"
"color: rgb(255,255,255,0.7);\n"
"font-weight: 800;")
        self.start_date.setObjectName("start_date")
        self.start_date_title = QtWidgets.QLabel(self.centralwidget)
        self.start_date_title.setGeometry(QtCore.QRect(60, 350, 71, 31))
        self.start_date_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.start_date_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.start_date_title.setObjectName("start_date_title")
        self.end_date_title = QtWidgets.QLabel(self.centralwidget)
        self.end_date_title.setGeometry(QtCore.QRect(316, 350, 71, 31))
        self.end_date_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.end_date_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.end_date_title.setObjectName("end_date_title")
        self.end_date = QtWidgets.QDateEdit(self.centralwidget)
        self.end_date.setGeometry(QtCore.QRect(380, 356, 110, 22))
        self.end_date.setStyleSheet("font: 7pt \"Montserrat\";\n"
"background-color: rgb(50, 24, 92);\n"
"color: rgb(255,255,255,0.7);\n"
"font-weight: 800;")
        self.end_date.setObjectName("end_date")
        self.nav_line_2 = QtWidgets.QLabel(self.centralwidget)
        self.nav_line_2.setGeometry(QtCore.QRect(50, 145, 700, 1))
        self.nav_line_2.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_2.setText("")
        self.nav_line_2.setObjectName("nav_line_2")
        self.nav_line_3 = QtWidgets.QLabel(self.centralwidget)
        self.nav_line_3.setGeometry(QtCore.QRect(50, 316, 700, 1))
        self.nav_line_3.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_3.setText("")
        self.nav_line_3.setObjectName("nav_line_3")
        self.bg_box3 = QtWidgets.QLabel(self.centralwidget)
        self.bg_box3.setGeometry(QtCore.QRect(30, 450, 741, 261))
        self.bg_box3.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(72, 147, 163,0.3);")
        self.bg_box3.setText("")
        self.bg_box3.setObjectName("bg_box3")
        self.specify_daytime_title = QtWidgets.QLabel(self.centralwidget)
        self.specify_daytime_title.setGeometry(QtCore.QRect(40, 450, 451, 51))
        self.specify_daytime_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.specify_daytime_title.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.specify_daytime_title.setObjectName("specify_daytime_title")
        self.nav_line_4 = QtWidgets.QLabel(self.centralwidget)
        self.nav_line_4.setGeometry(QtCore.QRect(50, 500, 700, 1))
        self.nav_line_4.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_4.setText("")
        self.nav_line_4.setObjectName("nav_line_4")
        self.free_on_title = QtWidgets.QLabel(self.centralwidget)
        self.free_on_title.setGeometry(QtCore.QRect(50, 660, 71, 31))
        self.free_on_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.free_on_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);\n"
"font-weight: bold;\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.free_on_title.setObjectName("free_on_title")
        self.add_day_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_day_button.setGeometry(QtCore.QRect(650, 530, 93, 28))
        self.add_day_button.setStyleSheet("background-color: rgb(38, 77, 99);\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.add_day_button.setObjectName("add_day_button")
        self.add_day_button.clicked.connect(self.display_days)
        self.add_time_button = QtWidgets.QPushButton(self.centralwidget)
        self.add_time_button.setGeometry(QtCore.QRect(650, 611, 93, 28))
        self.add_time_button.setStyleSheet("background-color: rgb(38, 77, 99);\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.add_time_button.setObjectName("add_time_button")
        self.add_time_button.clicked.connect(self.display_time)
        self.start_time = QtWidgets.QTimeEdit(self.centralwidget)
        self.start_time.setGeometry(QtCore.QRect(130, 616, 118, 22))
        self.start_time.setStyleSheet("font: 7pt \"Montserrat\";\n"
"background-color: rgb(38, 77, 99);\n"
"color: rgb(255,255,255,0.7);\n"
"font-weight: 800;")
        self.start_time.setObjectName("start_time")
        self.start_time_title = QtWidgets.QLabel(self.centralwidget)
        self.start_time_title.setGeometry(QtCore.QRect(60, 610, 71, 31))
        self.start_time_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.start_time_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);\n"
"font-weight: bold;\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.start_time_title.setObjectName("start_time_title")
        self.end_time_title = QtWidgets.QLabel(self.centralwidget)
        self.end_time_title.setGeometry(QtCore.QRect(316, 610, 71, 31))
        self.end_time_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.end_time_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);\n"
"font-weight: bold;\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.end_time_title.setObjectName("end_time_title")

        self.course_dropdown = QtWidgets.QComboBox(study_plan)
        self.course_dropdown.setGeometry(QtCore.QRect(130, 180, 110, 28))
        course_list=self.display_courses()
        self.course_dropdown.addItems(course_list)
        self.course_dropdown.setStyleSheet("font: 8pt \"Montserrat\";\n"
                                        "background-color: rgb(50, 24, 92);\n"
                                        "color: rgb(255,255,255);\n"
                                        "font-weight: 600;")
        
        self.day_dropdown= QtWidgets.QComboBox(study_plan)
        self.day_dropdown.setGeometry(QtCore.QRect(130, 530, 110, 28))
        self.day_dropdown.addItems(['Monday', 'Tuesday', 'Wednesday', 'Thursday','Friday','Saturday','Sunday'])
        self.day_dropdown.setStyleSheet("font: 8pt \"Montserrat\";\n"
                                        "background-color: rgb(38, 77, 99);\n"
                                        "color: rgb(255,255,255);\n"
                                        "font-weight: 600;")
        
        self.end_time = QtWidgets.QTimeEdit(self.centralwidget)
        self.end_time.setGeometry(QtCore.QRect(380, 616, 118, 22))
        self.end_time.setStyleSheet("font: 7pt \"Montserrat\";\n"
"background-color: rgb(38, 77, 99);\n"
"color: rgb(255,255,255,0.7);\n"
"font-weight: 800;")
        self.end_time.setObjectName("end_time")
        self.free_days_output = QtWidgets.QLabel(self.centralwidget)
        self.free_days_output.setGeometry(QtCore.QRect(120, 670, 271, 16))
        self.free_days_output.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.free_days_output.setText("")
        self.free_days_output.setObjectName("free_days_output")
        self.free_days_output.setWordWrap(True)
        self.from_title = QtWidgets.QLabel(self.centralwidget)
        self.from_title.setGeometry(QtCore.QRect(390, 660, 71, 31))
        self.from_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.from_title.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);\n"
"font-weight: bold;\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.from_title.setObjectName("from_title")
        self.free_hours_output = QtWidgets.QLabel(self.centralwidget)
        self.free_hours_output.setGeometry(QtCore.QRect(450, 670, 271, 16))
        self.free_hours_output.setStyleSheet("background: transparent;\n"
"font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.free_hours_output.setText("")
        self.free_hours_output.setObjectName("free_hours_output")
        self.whole_studyplan_output = QtWidgets.QTextEdit(self.centralwidget)
        self.whole_studyplan_output.setGeometry(QtCore.QRect(820, 100, 331, 681))
        self.whole_studyplan_output.setStyleSheet("font: 10pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.whole_studyplan_output.setObjectName("whole_studyplan_output")
        self.enter_button = QtWidgets.QPushButton(self.centralwidget)
        self.enter_button.setGeometry(QtCore.QRect(260, 740, 261, 31))
        self.enter_button.setStyleSheet("font: 13pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border:none;")
        self.enter_button.setObjectName("enter_button")
        self.enter_button.clicked.connect(self.multiturn_generate_content)

        self.left_button = QtWidgets.QPushButton(self.centralwidget)
        self.left_button.setGeometry(QtCore.QRect(230, 740, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.left_button.setFont(font)
        self.left_button.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"birder:none;\n"
"border-radius: 7px;")
        self.left_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images for cascade/starsss.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left_button.setIcon(icon)
        self.left_button.setIconSize(QtCore.QSize(30, 30))
        self.left_button.setObjectName("left_button")
        self.left_button.clicked.connect(self.multiturn_generate_content)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 740, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border-radius:7px;")
        self.pushButton_2.setText("")
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setIconSize(QtCore.QSize(30, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.multiturn_generate_content)

        self.bg.raise_()
        self.main_title.raise_()
        self.bg_box1.raise_()
        self.select_course_title.raise_()
        self.bg_box2.raise_()
        self.specify_date_title.raise_()
        self.start_date.raise_()
        self.start_date_title.raise_()
        self.end_date_title.raise_()
        self.end_date.raise_()
        self.nav_line_2.raise_()
        self.nav_line_3.raise_()
        self.bg_box3.raise_()
        self.specify_daytime_title.raise_()
        self.nav_line_4.raise_()
        self.free_on_title.raise_()
        self.add_day_button.raise_()
        self.add_time_button.raise_()
        self.start_time.raise_()
        self.start_time_title.raise_()
        self.end_time_title.raise_()
        self.end_time.raise_()
        self.free_days_output.raise_()
        self.from_title.raise_()
        self.free_hours_output.raise_()
        self.whole_studyplan_output.raise_()
        self.label_behind_button = QtWidgets.QLabel(self.centralwidget)
        self.label_behind_button.setGeometry(QtCore.QRect(240, 750, 321, 31))
        self.label_behind_button.setStyleSheet("background-color: rgb(58, 40, 93);\n"
"border-radius:7px;")
        self.label_behind_button.setText("")
        self.label_behind_button.setObjectName("label_behind_button")
        self.label_behind_button.raise_()
        self.enter_button.raise_()
        self.pushButton_2.raise_()
        self.left_button.raise_()
        study_plan.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(study_plan)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1199, 26))
        self.menubar.setObjectName("menubar")
        study_plan.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(study_plan)
        self.statusbar.setObjectName("statusbar")
        study_plan.setStatusBar(self.statusbar)

        self.retranslateUi(study_plan)
        QtCore.QMetaObject.connectSlotsByName(study_plan)

    def retranslateUi(self, study_plan):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon(":/images/images for cascade/dark_study_icon.png")
        study_plan.setWindowIcon(icon)
        study_plan.setWindowTitle(_translate("study_plan", "Study Plan"))
        self.main_title.setText(_translate("study_plan", "Create Study Plan"))
        self.select_course_title.setText(_translate("study_plan", "Select Course"))
        self.specify_date_title.setText(_translate("study_plan", "Specify date constraint"))
        self.start_date_title.setText(_translate("study_plan", "START:"))
        self.end_date_title.setText(_translate("study_plan", "END:"))
        self.specify_daytime_title.setText(_translate("study_plan", "Specify day and time constraint"))
        self.free_on_title.setText(_translate("study_plan", "Free on:-"))
        self.add_day_button.setText(_translate("study_plan", "Add"))
        self.add_time_button.setText(_translate("study_plan", "Add"))
        self.start_time_title.setText(_translate("study_plan", "START:"))
        self.end_time_title.setText(_translate("study_plan", "END:"))
        self.from_title.setText(_translate("study_plan", "from"))
        self.enter_button.setText(_translate("study_plan", "Generate Study Plan!"))

    
    def display_courses(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        
        # Fetch the course name from the table
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses")
        course_name = cursor.fetchall()
        course_list = []
                
        for name in course_name:
                course_list.append(name[0])

        cursor.close()
        conn.close()

        return course_list
    
    def display_days(self):
        selected_day = self.day_dropdown.currentText()  # Get the selected item text
        current_text = self.free_days_output.text()  # Get the current text of the label
        if current_text:
                # Append the new day with a space if the label already has text
                self.free_days_output.setText(current_text + ' ' + selected_day)
        else:
                # Set the text of the label to the selected item if the label is empty
                self.free_days_output.setText(selected_day)

    def display_time(self):
        current_start_time = self.start_time.time()  # This returns a QTime object
        formatted_start_time = current_start_time.toString("HH:mm:ss")  # Format the time as a string

        current_end_time = self.end_time.time()  # This returns a QTime object
        formatted_end_time = current_end_time.toString("HH:mm:ss")  # Format the time as a string

        parsed_start_time = QTime.fromString(formatted_start_time, "HH:mm:ss")
        parsed_end_time = QTime.fromString(formatted_end_time, "HH:mm:ss")
        formatted_start_time_12hr = parsed_start_time.toString("h:mm AP")
        formatted_end_time_12hr = parsed_end_time.toString("h:mm AP")

        #selected_day = self.day_dropdown.currentText()  
        current_text = self.free_hours_output.text()
        parsed_time = QTime.fromString(current_text, "H:mm")
        formatted_time = parsed_time.toString("h:mm AP")
        if current_text:
                # Append the new day with a space if the label already has text
                self.free_hours_output.setText(current_text + ' and ' + formatted_start_time_12hr + ' to ' + formatted_end_time_12hr)
        else:
                # Set the text of the label to the selected item if the label is empty
                self.free_hours_output.setText(formatted_start_time_12hr + ' to ' + formatted_end_time_12hr)

    def save_information(self,subject, syllabus, study_period, availability_days, time_slots, ability_score):
        prompt_input=f"Create a study plan :- \nSyllabus: {syllabus} \nStudy Period: {study_period} \nAvailability: {availability_days} at {time_slots} \nUser ability score: {ability_score}"
        return(prompt_input)
    
    def inputs(self):
        def format_days(selected_days_str):
                selected_days = selected_days_str.split()
                num_days = len(selected_days)
                
                if num_days == 0:
                        return ""
                elif num_days == 1:
                        return selected_days[0]
                elif num_days == 2:
                        return f"{selected_days[0]} and {selected_days[1]}"
                else:
                        return f"{', '.join(selected_days[:-1])} and {selected_days[-1]}"
        
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        subject = self.course_dropdown.currentText()

        # Use a parameterized query with SQLite's placeholder '?'
        cursor.execute("SELECT syllabus FROM courses WHERE name = ?", (subject,))
        syllabus_row = cursor.fetchone()
        syllabus = syllabus_row[0] if syllabus_row else 'N/A'


        study_period = self.start_date.date().toString("MMMM d") + " to " + self.end_date.date().toString("MMMM d")

        yeaah=self.free_days_output.text()

        availability_days = format_days(yeaah)

        time_slots = self.free_hours_output.text()

        ability_score = 6
        
        # Clamp the ability score to the range [1, 15]
        ability_score = max(1, min(ability_score, 15))
        
        if availability_days.lower() == "everyday":
                availability_days = "Monday Tuesday Wednesday Thursday Friday Saturday Sunday"

        # Ensure to handle the save_information method accordingly
        return self.save_information(subject, syllabus, study_period, availability_days, time_slots, ability_score)
    
    def multiturn_generate_content(self):
        self.text1_1 = self.inputs()
        print(self.text1_1)
        textsi_1 = """Create a study plan in using the following these instructions:
 
The user will provide:-
Syllabus (content to be covered).
Study period (start date to end date).
Availability (specific days and time slots).
User ability score (1 to 15, where 15 is master level and 1 is most improvement needed). Decide user workload depending on this core. The higher the score the lower the workload


IMPORTANT:-
1. You need to check the Availability and time slots given properly and only provide study for those which are mentioned by the user. 
2. You need to ensure proper consistent Formatting of \"#\" and \"*\" . for eg: ## before Course Title, ### before Week number, #### before Day, * before Time Slot.


Example input:
Create a study plan:-
Syllabus :- {User will input syllabus you need to distribute workload according to it}
Study period: {User will specifystart date to end date}
Availability: {User will specify days and time slots}
User-ability score: 15
 
 
 
Example output:
 
\"## Introduction to Web System Study Plan (March 20 - April 15):\\\\n\\\\n### Week 1 (March 20 - March 26):\\\\n\\\\n#### Monday (March 20):\\\\n* 10:30 AM - 12:30 PM: Internet Overview, WWW, and Web Protocols - Understand the basics of the Internet, the World Wide Web, and the essential web protocols.\\\\n* 4:30 PM - 7:30 PM: Web Browsers and Web Servers - Learn about different web browsers, their functions, and how web servers operate.\\\\n\\\\n#### Wednesday (March 22):\\\\n* 10:30 AM - 12:30 PM: Web System Architecture - Study the architecture of web systems, including the client-server model.\\\\n* 4:30 PM - 7:30 PM: URL and Domain Name - Understand the structure and function of URLs and domain names.\\\\n\\\\n#### Friday (March 24):\\\\n* 10:30 AM - 12:30 PM: Client and Server-side Scripting - Introduction to scripting on both client and server sides.\\\\n* 4:30 PM - 7:30 PM: HTML5 Basics and Formatting - Start with the basics of HTML5 and learn about text formatting.\\\\n\\\\n### Week 2 (March 27 - April 2):\\\\n\\\\n#### Monday (March 27):\\\\n* 10:30 AM - 12:30 PM: HTML5 Colors, Images, and Links - Learn how to add colors, images, and links to a webpage.\\\\n* 4:30 PM - 7:30 PM: HTML5 Tables, Lists, and Layout - Understand how to create tables, lists, and layout structures in HTML5.\\\\n\\\\n#### Wednesday (March 29):\\\\n* 10:30 AM - 12:30 PM: HTML5 Forms, Canvas, and Media - Learn about creating forms, using the canvas element, and embedding media.\\\\n* 4:30 PM - 7:30 PM: CSS3 Basics and Selectors - Introduction to CSS3, including basic syntax and selectors.\\\\n\\\\n#### Friday (March 31):\\\\n* 10:30 AM - 12:30 PM: CSS3 Box Model, Backgrounds, and Borders - Understand the box model, and learn how to style backgrounds and borders.\\\\n* 4:30 PM - 7:30 PM: CSS3 Text Effects and Advanced Features - Explore text effects and advanced CSS3 features.\\\\n\\\\n### Week 3 (April 3 - April 9):\\\\n\\\\n#### Monday (April 3):\\\\n* 10:30 AM - 12:30 PM: JavaScript Basics and Functions - Learn the basics of JavaScript and how to define and use functions.\\\\n* 4:30 PM - 7:30 PM: JavaScript Arrays and DOM - Understand arrays in JavaScript and how to manipulate the DOM.\\\\n\\\\n#### Wednesday (April 5):\\\\n* 10:30 AM - 12:30 PM: JavaScript Built-in Objects and Regular Expressions - Learn about JavaScript\\\'s built-in objects and the use of regular expressions.\\\\n* 4:30 PM - 7:30 PM: Event Handling and Validation - Understand event handling in JavaScript and form validation techniques.\\\\n\\\\n#### Friday (April 7):\\\\n* 10:30 AM - 12:30 PM: JSON Basics and jQuery Basics - Introduction to JSON and jQuery basics.\\\\n* 4:30 PM - 7:30 PM: jQuery Plugins - Learn about jQuery plugins and how to use them.\\\\n\\\\n### Week 4 (April 10 - April 15):\\\\n\\\\n#### Monday (April 10):\\\\n* 10:30 AM - 12:30 PM:  Review and Practice -  Revisit key concepts from HTML, CSS, and JavaScript. Practice building simple web pages and implementing basic functionalities.\\\\n* 4:30 PM - 7:30 PM: Project Planning - Choose a small web development project that you want to work on. Plan the project scope, functionalities, and technologies you will use.\\\\n\\\\n#### Wednesday (April 12):\\\\n* 10:30 AM - 12:30 PM: Project Development -  Start building your project, focusing on HTML, CSS, and basic JavaScript interactions.\\\\n* 4:30 PM - 7:30 PM: Project Development (Continued) - Continue building your project, adding more features and refining the design.\\\\n\\\\n#### Friday (April 14):\\\\n* 10:30 AM - 12:30 PM: Project Finalization - Complete your project, debug any issues, and ensure all functionalities work as expected.\\\\n* 4:30 PM - 7:30 PM: Project Presentation/Review - Present your project to a peer or mentor, or conduct a self-review to assess your progress and identify areas for improvement.\\\\n\\\\n#### Note:\\\\nThe user has a score of 10, which indicates moderate proficiency. This study plan provides a structured approach to cover the syllabus, incorporating both theoretical learning and practical project work. It is suggested to review the material and complete additional practice exercises as needed.\\\""""

        vertexai.init(project="673460396526", location="us-central1")
        model = GenerativeModel(
            "projects/673460396526/locations/us-central1/endpoints/3677037363143376896",
    system_instruction=[textsi_1]
        )
        chat = model.start_chat()
        generation_config = {
        "max_output_tokens": 8192,
        "temperature": 1,
        "top_p": 0.95,
        }

        safety_settings = {
        generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        }

        response = chat.send_message([self.text1_1],generation_config=generation_config,
      safety_settings=safety_settings)

        if hasattr(response, 'candidates') and len(response.candidates) > 0:
            # Extract the text content from the first candidate
            content = response.candidates[0].content.parts[0].text
        else:  
            print("No candidates found in the response.")

  
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        subject = self.course_dropdown.currentText()

        cursor.execute("SELECT plan FROM study_plan WHERE name = ?", (subject,))
        existing_plan = cursor.fetchone()

        study_period = self.start_date.date().toString("MMMM d") + " to " + self.end_date.date().toString("MMMM d")
        availability_day = self.free_days_output.text().split()
        availability_days=str(availability_day)

        if existing_plan:
                # Subject exists, update the plan
                cursor.execute("UPDATE study_plan SET plan = ? WHERE name = ?", (content, subject))
        else:
                # Subject doesn't exist, insert a new row
                cursor.execute("INSERT INTO study_plan (name, plan, study_period, avail) VALUES (?, ?,?,?)", (subject, content, study_period, availability_days))

        conn.commit()
        conn.close()

        self.whole_studyplan_output.setPlainText(str(content))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    study_plan = QtWidgets.QMainWindow()
    app.setStyle("Windows")
    ui = Ui_study_plan()
    ui.setupUi(study_plan)
    study_plan.show()
    sys.exit(app.exec_())

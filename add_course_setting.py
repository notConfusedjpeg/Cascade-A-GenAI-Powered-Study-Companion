# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'add_course_settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap, QFont, QCloseEvent
import vertexai.preview.generative_models as generative_models
import resourcesCascade
from course_manager import CourseManager
from PyQt5.QtWidgets import QToolTip, QMessageBox, QApplication
from PyQt5.QtCore import pyqtSignal, QObject, QTimer
import sqlite3
from vertexai.generative_models import GenerativeModel, Part
import base64
import vertexai
import json
import re
from PyQt5.QtCore import QTimer
import settings
from proficiency_dialog import ProficiencyDialog  #Import statement


class Ui_add_course_settings(object):
    def __init__(self, settings_window=None):
        self.settings_window = settings_window # Store the reference to the main settings window
        self.course_manager = CourseManager()

    def closeEvent(self, event):
        if self.settings_window and self.recent_course:
           self.window = QtWidgets.QMainWindow()
           self.ui = settings.Ui_settings(self.window)
           self.ui.setupUi(self.window)
           self.window.show()
           event.accept()
           self.open_proficiency_dialogs(self.recent_course)

    def close_add_course_settings(self):
      self.add_course_settings.close()


    def setupUi(self, add_course_settings):
        add_course_settings.setObjectName("add_course_settings")
        add_course_settings.resize(835, 736)
        add_course_settings.setStyleSheet("background-color: rgb(27, 32, 81);")
        self.centralwidget = QtWidgets.QWidget(add_course_settings)
        self.centralwidget.setObjectName("centralwidget")
        self.bg = QtWidgets.QLabel(self.centralwidget)
        self.bg.setGeometry(QtCore.QRect(0, 0, 1221, 801))
        self.bg.setStyleSheet("")
        self.bg.setText("")
        self.bg.setPixmap(QtGui.QPixmap(":/images/images for cascade/bg_image.png"))
        self.bg.setScaledContents(True)
        self.bg.setObjectName("bg")
        self.add_course_title = QtWidgets.QLabel(self.centralwidget)
        self.add_course_title.setGeometry(QtCore.QRect(250, 0, 311, 61))
        self.add_course_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.add_course_title.setStyleSheet("background: transparent;\n"
"font: 25pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignRight;\n"
"")
        self.add_course_title.setObjectName("add_course_title")
        self.nav_line = QtWidgets.QLabel(self.centralwidget)
        self.nav_line.setGeometry(QtCore.QRect(240, 55, 321, 1))
        self.nav_line.setStyleSheet("background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"    stop:0 rgba(255, 255, 255, 0),\n"
"    stop:1 rgba(255, 255, 255, 200));")
        self.nav_line.setText("")
        self.nav_line.setObjectName("nav_line")
        self.course_title = QtWidgets.QLabel(self.centralwidget)
        self.course_title.setGeometry(QtCore.QRect(20, 80, 321, 31))
        self.course_title.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 15pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);")
        self.skills_title = QtWidgets.QLabel(self.centralwidget)
        self.skills_title.setGeometry(QtCore.QRect(580, 80, 321, 31))
        self.skills_title.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 15pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);")
        self.skills_title.setObjectName("skills_title")
        self.course_title_input = QtWidgets.QTextEdit(self.centralwidget)
        self.course_title_input.setGeometry(QtCore.QRect(30, 120, 511, 41))
        self.course_title_input.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.course_title_input.setObjectName("course_title_input")
        self.help = QtWidgets.QPushButton(self.centralwidget)
        self.help.setGeometry(QtCore.QRect(510, 194, 29, 29))
        self.help.setStyleSheet("background-color: transparent;\n"
"border-radius: 13px; font: 10pt 'Monteserrat'; color:rgb(149, 145, 203)")
        self.help.setObjectName("help")
        self.help.clicked.connect(self.show_help_message) 
        
        self.syllabus_title = QtWidgets.QLabel(self.centralwidget)
        self.syllabus_title.setGeometry(QtCore.QRect(20, 190, 321, 31))
        self.syllabus_title.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 15pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);")
        self.syllabus_title.setObjectName("syllabus_title")
        self.syllabus_title_input = QtWidgets.QTextEdit(self.centralwidget)
        self.syllabus_title_input.setGeometry(QtCore.QRect(30, 230, 511, 151))
        self.syllabus_title_input.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input.setObjectName("syllabus_title_input")
        self.modules_title = QtWidgets.QLabel(self.centralwidget)
        self.modules_title.setGeometry(QtCore.QRect(20, 430, 321, 31))
        self.modules_title.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 15pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);")
        self.modules_title.setObjectName("modules_title")
        self.ModuleWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.ModuleWidget.setGeometry(QtCore.QRect(30, 470, 511, 171))
        self.ModuleWidget.setStyleSheet("font: 9pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.ModuleWidget.setObjectName("ModuleWidget")
        self.mod1 = QtWidgets.QWidget()
        self.mod1.setObjectName("mod1")
        self.syllabus_title_input_1 = QtWidgets.QTextEdit(self.mod1)
        self.syllabus_title_input_1.setGeometry(QtCore.QRect(0, 0, 511, 151))
        self.syllabus_title_input_1.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input_1.setReadOnly(True)
        self.syllabus_title_input_1.setPlaceholderText("")
        self.syllabus_title_input_1.setObjectName("syllabus_title_input_1")
        self.ModuleWidget.addTab(self.mod1, "")
        self.mod2 = QtWidgets.QWidget()
        self.mod2.setObjectName("mod2")
        self.syllabus_title_input_2 = QtWidgets.QTextEdit(self.mod2)
        self.syllabus_title_input_2.setGeometry(QtCore.QRect(0, 0, 511, 151))
        self.syllabus_title_input_2.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input_2.setReadOnly(True)
        self.syllabus_title_input_2.setPlaceholderText("")
        self.syllabus_title_input_2.setObjectName("syllabus_title_input_2")
        self.ModuleWidget.addTab(self.mod2, "")
        self.mod3 = QtWidgets.QWidget()
        self.mod3.setObjectName("mod3")
        self.syllabus_title_input_3 = QtWidgets.QTextEdit(self.mod3)
        self.syllabus_title_input_3.setGeometry(QtCore.QRect(0, 0, 511, 151))
        self.syllabus_title_input_3.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input_3.setReadOnly(True)
        self.syllabus_title_input_3.setPlaceholderText("")
        self.syllabus_title_input_3.setObjectName("syllabus_title_input_3")
        self.ModuleWidget.addTab(self.mod3, "")
        self.mod4 = QtWidgets.QWidget()
        self.mod4.setObjectName("mod4")
        self.syllabus_title_input_4 = QtWidgets.QTextEdit(self.mod4)
        self.syllabus_title_input_4.setGeometry(QtCore.QRect(0, 0, 511, 151))
        self.syllabus_title_input_4.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input_4.setReadOnly(True)
        self.syllabus_title_input_4.setPlaceholderText("")
        self.syllabus_title_input_4.setObjectName("syllabus_title_input_4")
        self.ModuleWidget.addTab(self.mod4, "")
        self.mod5 = QtWidgets.QWidget()
        self.mod5.setObjectName("mod5")
        self.syllabus_title_input_5 = QtWidgets.QTextEdit(self.mod5)
        self.syllabus_title_input_5.setGeometry(QtCore.QRect(0, 0, 511, 151))
        self.syllabus_title_input_5.setStyleSheet("background-color: rgb(149, 145, 203,0.4);\n"
"font: 10pt \"Monteserrat\";\n"
"color: rgb(255, 255, 255);")
        self.syllabus_title_input_5.setReadOnly(True)
        self.syllabus_title_input_5.setPlaceholderText("")
        self.syllabus_title_input_5.setObjectName("syllabus_title_input_5")
        self.ModuleWidget.addTab(self.mod5, "")
        self.enter_button = QtWidgets.QPushButton(self.centralwidget)
        self.enter_button.setGeometry(QtCore.QRect(44, 390, 93, 28))
        self.enter_button.setStyleSheet("QPushButton {\n"
"    background-color: rgba(185, 185, 185, 0);\n"
"    font: 10pt \"Montserrat\";\n"
"    color: rgb(154, 154, 154);\n"
"    border-radius: 5px;\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    color: rgb(195, 195, 195);\n"
"}\n"
"")
        self.enter_button.setObjectName("enter_button")

        self.enter_button.clicked.connect(self.handle_user_input)
        self.modularize_fill = QtWidgets.QLabel(self.centralwidget)
        self.modularize_fill.setGeometry(QtCore.QRect(30, 390, 121, 31))
        self.modularize_fill.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(87, 60, 138);")
        self.modularize_fill.setText("")
        self.modularize_fill.setObjectName("modularize_fill")

        self.enter2_button = QtWidgets.QPushButton(self.centralwidget)
        self.enter2_button.setGeometry(QtCore.QRect(450, 650, 93, 28))
        self.enter2_button.setStyleSheet("QPushButton {\n"
"    background-color: rgba(185, 185, 185, 0);\n"
"    font: 10pt \"Montserrat\";\n"
"    color: rgb(154, 154, 154);\n"
"    border-radius: 5px;\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    color: rgb(195, 195, 195);\n"
"}\n"
"")
        self.enter2_button.setObjectName("enter2_button")
        self.enter2_button.clicked.connect(self.on_click)

        self.right_button = QtWidgets.QPushButton(self.centralwidget)
        self.right_button.setGeometry(QtCore.QRect(490, 390, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.right_button.setFont(font)
        self.right_button.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border-radius:7px;")
        self.right_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images for cascade/starsss.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.right_button.setIcon(icon)
        self.right_button.setIconSize(QtCore.QSize(30, 30))
        self.right_button.setObjectName("right_button")
        self.right_button.clicked.connect(self.multiturn_generate_content)
        self.label_behind_button = QtWidgets.QLabel(self.centralwidget)
        self.label_behind_button.setGeometry(QtCore.QRect(330, 400, 211, 31))
        self.label_behind_button.setStyleSheet("background-color: rgb(58, 40, 93);\n"
"border-radius:7px;")
        self.label_behind_button.setText("")
        self.label_behind_button.setObjectName("label_behind_button")
        self.left_button = QtWidgets.QPushButton(self.centralwidget)
        self.left_button.setGeometry(QtCore.QRect(320, 390, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.left_button.setFont(font)
        self.left_button.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"birder:none;\n"
"border-radius: 7px;")
        self.left_button.setText("")
        self.left_button.setIcon(icon)
        self.left_button.setIconSize(QtCore.QSize(30, 30))
        self.left_button.setObjectName("left_button")
        self.left_button.clicked.connect(self.multiturn_generate_content)

        self.skills_output = QtWidgets.QTextEdit(self.centralwidget)
        self.skills_output.setGeometry(QtCore.QRect(590, 120, 201, 521))
        self.skills_output.setStyleSheet("font: 8pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.skills_output.setObjectName("skills_output")
        
        self.skills_button = QtWidgets.QPushButton(self.centralwidget)
        self.skills_button.setGeometry(QtCore.QRect(350, 390, 151, 31))
        self.skills_button.setStyleSheet("font: 10pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border:none;")
        self.skills_button.setObjectName("enter_button_2")
        self.skills_button.clicked.connect(self.multiturn_generate_content)
        self.enter_fill = QtWidgets.QLabel(self.centralwidget)
        self.add_course_settings = add_course_settings
        self.enter_fill.setGeometry(QtCore.QRect(450, 650, 91, 31))
        self.enter_fill.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(87, 60, 138);")
        self.enter_fill.setText("")
        self.enter_fill.setObjectName("enter_fill")
        self.bg.raise_()
        self.enter_fill.raise_()
        self.modularize_fill.raise_()
        self.label_behind_button.raise_()
        self.add_course_title.raise_()
        self.nav_line.raise_()
        self.course_title.raise_()
        self.skills_title.raise_()
        self.course_title_input.raise_()
        self.syllabus_title.raise_()
        self.syllabus_title_input.raise_()
        self.modules_title.raise_()
        self.ModuleWidget.raise_()
        self.enter_button.raise_()
        self.enter2_button.raise_()
        self.skills_output.raise_()
        self.skills_button.raise_()
        self.help.raise_()
        self.right_button.raise_()
        self.left_button.raise_()
        add_course_settings.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(add_course_settings)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 579, 26))
        self.menubar.setObjectName("menubar")
        add_course_settings.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(add_course_settings)
        self.statusbar.setObjectName("statusbar")
        add_course_settings.setStatusBar(self.statusbar)

        self.retranslateUi(add_course_settings)
        self.ModuleWidget.setCurrentIndex(4)
        QtCore.QMetaObject.connectSlotsByName(add_course_settings)
    
    def retranslateUi(self, add_course_settings):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon(":/images/images for cascade/settings.png")
        add_course_settings.setWindowIcon(icon)
        add_course_settings.setWindowTitle(_translate("add_course_settings", "Add Course Settings"))
        self.add_course_title.setText(_translate("add_course_settings", "Add Course"))
        self.course_title.setText(_translate("add_course_settings", "Title"))
        self.skills_title.setText(_translate("add_course_settings", "Skills Gained: "))
        self.course_title_input.setPlaceholderText(_translate("add_course_settings", "Enter course title here..."))
        self.syllabus_title.setText(_translate("add_course_settings", "Syllabus"))
        self.syllabus_title_input.setPlaceholderText(_translate("add_course_settings", "Enter syllabus here..."))
        self.modules_title.setText(_translate("add_course_settings", "Modules"))
        self.ModuleWidget.setTabText(self.ModuleWidget.indexOf(self.mod1), _translate("add_course_settings", "Module 1"))
        self.ModuleWidget.setTabText(self.ModuleWidget.indexOf(self.mod2), _translate("add_course_settings", "Module 2"))
        self.ModuleWidget.setTabText(self.ModuleWidget.indexOf(self.mod3), _translate("add_course_settings", "Module 3"))
        self.ModuleWidget.setTabText(self.ModuleWidget.indexOf(self.mod4), _translate("add_course_settings", "Module 4"))
        self.ModuleWidget.setTabText(self.ModuleWidget.indexOf(self.mod5), _translate("add_course_settings", "Module 5"))
        self.enter_button.setText(_translate("add_course_settings", "Modularise"))
        self.enter2_button.setText(_translate("add_course_settings", "Enter"))
        self.skills_button.setText(_translate("add_course_settings", "Generate Skills!"))
        self.help.setText(_translate("add_course_settings", "?"))

    def show_help_message(self):
        
        msg_box = QMessageBox(self.add_course_settings)
        msg_box.setWindowTitle("Help")
        msg_box.setText("Users are required to enter the syllabus with segregation between major topics using newline or '*'.")
        msg_box.setIcon(QMessageBox.Information)

       
        msg_box.setStandardButtons(QMessageBox.Ok) 

        
        ok_button = msg_box.button(QMessageBox.Ok)
        ok_button.setText("Got it!")
        ok_button.setStyleSheet("background-color: rgb(87, 60, 138); color: white;")  

       
        msg_box.setStyleSheet("QLabel{color: rgb(195, 195, 195);}")  

        
        msg_box.exec_()

    def on_click(self):
        self.skills_output.setPlainText("Loading skills...Please Wait")
        QApplication.processEvents()
        self.multiturn_generate_content()
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        try:
            course_title = self.course_title_input.toPlainText()
            syllabus_content = self.syllabus_title_input.toPlainText()
            skills_gained = self.skills_output.toPlainText()

            # Insert new row into the courses table
            query = "INSERT INTO courses (name, syllabus,skills_gained) VALUES (?, ?,?)"
            values = (course_title, syllabus_content, skills_gained)
            cursor.execute(query, values)
            conn.commit()

            # Refresh the course list in the main window (Ui_settings)
            self.settings.refresh_courses()

        except sqlite3.Error as e:
            print(f"An error occurred: {e.args[0]}")
        finally:
            cursor.close()
            conn.close()

    def __init__(self):
        self.course_manager = CourseManager()
        
    def handle_user_input(self):
        title = self.course_title_input.toPlainText()  # Replace with your actual input widget
        syllabus = self.syllabus_title_input.toPlainText()  # Replace with your actual input widget

        # Set the course data and update the modules
        self.course_manager.set_course(title, syllabus)
        self.update_modules()
        def get_most_recent_course():
             conn = sqlite3.connect('cascade_project.db')
             cursor = conn.cursor()
             # Query the database to get the most recent course
             cursor.execute("SELECT name FROM courses ORDER BY ROWID DESC LIMIT 1")
             row = cursor.fetchone()
             conn.close()
             # Return the course if found, otherwise return None
             if row:
                   return row[0]
             else:
                   return None

        self.recent_course = get_most_recent_course()


    def update_modules(self):
        # Split the syllabus into chunks of one line
        course_syllabus = self.course_manager.get_course_syllabus()
        syllabus_lines = course_syllabus.split("*")
        num_modules = min(len(syllabus_lines), 5)  # Limit to 5 modules

        for i in range(num_modules):
            module_text = syllabus_lines[i]  # Use one line at a time
            module_widget = getattr(self, f"syllabus_title_input_{i + 1}")  # Get the mod widget dynamically
            module_widget.setPlainText(module_text)

    def multiturn_generate_content(self):
        def get_most_recent_course():
                conn = sqlite3.connect('cascade_project.db')
                cursor = conn.cursor()
                # Query the database to get the most recent course
                cursor.execute("SELECT domain FROM user_choice ORDER BY id DESC LIMIT 1")
                row = cursor.fetchone()
                # Return the course if found, otherwise return None
                if row:
                        return row[0]
                else:
                        return None
        def get_skills_for_most_recent_course():
                # Get the most recent course selected by the user
                most_recent_course = get_most_recent_course()
                if most_recent_course is None:
                        return None
                
                conn = sqlite3.connect('cascade_project.db')
                cursor = conn.cursor()
                # Query the database to get the skills for the most recent course
                cursor.execute("SELECT skills FROM domains WHERE domain = ?", (most_recent_course,))
                row = cursor.fetchone()
                conn.close()
                
                if row:
                        # Parse the JSON string to get the skills as a list
                        skills = json.loads(row[0])
                        print("Skills retrieved:", skills)  # Debugging line
                        return skills
                else:
                        return []  # Return an empty list if no skills are found  
        def format_skills(skills):
                if skills is None:
                        return "No skills found."
                else:
                        return ", ".join(skills)
                        
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        syllabus = self.syllabus_title_input.toPlainText()
        conn.close()

        domain=get_most_recent_course()
        skills=format_skills(get_skills_for_most_recent_course())

        textsi_1 ="""Determine the skills gained by completing a syllabus and follow the instructions:

The user will provide:
Syllabus:
Domain: {The area whose skills they need to progress in}
Skills: {The skills they need to progress}

IMPORTANT: this is the output format you should follow ""skills_Progressed: (Topic1:[&Skill_1& $value1$],**Title2**:[&Skill_2& $value2$])"

where it should enter the values in each.
Topic = Topic from syllabus
&Skill& = Skill name
$value$ = Value of point
"

Example input from user:
Given a syllabus for a course in a specific domain and a list of skills related to that domain, determine which skills will be progressed by completing the course and by how many points. The points are awarded based on the content of the syllabus and its relevance to each skill. Each skill has a progression system with 5 levels: Beginner, Basic, Intermediate, Advanced, and Master. Each level requires 100 points to progress, and a total of 500 points to reach mastery.Domain: Biology, Skills: - Cell Biology- Genetics- Ecology- Evolutionary Biology- Physiology- Microbiology- Molecular Biology- Bioinformatics- Biostatistics- Immunology- Plant Biology- Animal Behavior- Neuroscience- Environmental Science- Research Methods in Biology- Biotechnology- Conservation Biology- Marine Biology- Health Sciences- Fieldwork and Data Collection Syllabus:Mathematical Techniques for Business Applications:Ratio and proportion.Percentages.Simple and compound interest.Descriptive Statistics and Data Analysis:Measures of central tendency (mean, median, mode).Measures of dispersion (variance, standard deviation).Data presentation (tables, graphs).


Example output:

skills_progressed: (Ratio and proportion: &Financial Analysis& $30$; Percentages: &Financial Analysis& $30$; Simple and compound interest: &Financial Analysis& $40$; Measures of central tendency (mean, median, mode): &Financial Analysis& $40$, &Business Communication& $20$; Measures of dispersion (variance, standard deviation): &Financial Analysis& $40$; Data presentation (tables, graphs): &Financial Analysis& $40$, &Business Communication& $30$)"""
        prompt_input=f"Given a syllabus for a course in a specific domain and a list of skills related to that domain, determine which skills will be progressed by completing the course and by how many points. The points are awarded based on the content of the syllabus and its relevance to each skill. Each skill has a progression system with 5 levels: Beginner, Basic, Intermediate, Advanced, and Master. Each level requires 100 points to progress, and a total of 500 points to reach mastery.Domain: {domain}, Skills: {skills} Syllabus: {syllabus}"                  
        self.text1_1 = prompt_input
        vertexai.init(project="673460396526", location="us-central1")
        model = GenerativeModel(
        "projects/673460396526/locations/us-central1/endpoints/3677037363143376896", system_instruction=[textsi_1]
        )
        generation_config = {
    "max_output_tokens": 8192,
    "temperature": 1,
    "top_p": 1,
}

        safety_settings = {
    generative_models.HarmCategory.HARM_CATEGORY_HATE_SPEECH: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,
    generative_models.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,
    generative_models.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,
    generative_models.HarmCategory.HARM_CATEGORY_HARASSMENT: generative_models.HarmBlockThreshold.BLOCK_ONLY_HIGH,
}

        chat = model.start_chat()
        response = chat.send_message([self.text1_1], generation_config=generation_config,
      safety_settings=safety_settings)

        if hasattr(response, 'candidates') and len(response.candidates) > 0:
            # Extract the text content from the first candidate
            content = response.candidates[0].content.parts[0].text
        else:  
            print("No candidates found in the response.")
        

        def parse_skills_progressed(input_str):
                # Remove the initial identifier if present
                if input_str.startswith("skills_Progressed: "):
                        input_str = input_str[len("skills_Progressed: "):]
                
                # Remove the outer parentheses
                if input_str.startswith("(") and input_str.endswith(")"):
                        input_str = input_str[1:-1]
                
                # Split the input string into different skill sections
                skill_sections = input_str.split(';')
                
                # Dictionary to store the parsed data
                skills_data = {}

                for section in skill_sections:
                        if ':' in section:
                                # Split into main skill and sub-skills only at the first occurrence of ':'
                                main_skill, sub_skills = section.split(':', 1)
                                main_skill = main_skill.strip()
                                
                                # Find all sub-skills and their points using regex
                                sub_skills_matches = re.findall(r'&([^&$]+)&\s*\$(\d+)\$', sub_skills)
                                
                                # Store the sub-skills and points in the dictionary
                                skills_data[main_skill] = [(skill.strip(), int(points)) for skill, points in sub_skills_matches]

                # Format the output as desired
                output = []
                for main_skill, sub_skills in skills_data.items():
                        output.append(f"{main_skill}")
                        output.append("Skills gained:")
                        for skill, points in sub_skills:
                                output.append(f"->{skill}: {points} Points")
                        output.append("")  # Add a blank line for separation

                return "\n".join(output)

        final=parse_skills_progressed(content)
        self.skills_output.setPlainText(str(final))

        def parse_skills(input_str):
                # Split the input string into different skill sections
                skill_sections = input_str.strip().split('\n\n')
                
                # Dictionary to store the parsed data
                skills_data = {}

                for section in skill_sections:
                        lines = section.split('\n')
                        main_skill = lines[0].strip()
                        
                        if "Skills gained:" in lines[1]:
                                sub_skills = lines[2:]  # Get all sub-skills lines
                        
                        for sub_skill in sub_skills:
                                match = re.match(r'->([^:]+):\s*(\d+)\s*Points', sub_skill.strip())
                                if match:
                                        skill = match.group(1).strip()
                                        points = int(match.group(2).strip())
                                        if skill in skills_data:
                                                skills_data[skill] += points
                                        else:
                                                skills_data[skill] = points

                return skills_data
    
        parsed_skills = parse_skills(final)

        def update_database(skills_data):
                # Connect to SQLite database
                conn = sqlite3.connect('cascade_project.db')
                cursor = conn.cursor()

                for skill, points in skills_data.items():
                        # Check if the skill already exists in the database
                        cursor.execute('SELECT points FROM skills_points WHERE skill = ?', (skill,))
                        result = cursor.fetchone()
                        
                        if result:
                        # Update the existing record
                                new_points = result[0] + points
                                cursor.execute('UPDATE skills_points SET points = ? WHERE skill = ?', (new_points, skill))
                        else:
                        # Insert a new record
                                cursor.execute('INSERT INTO skills_points (skill, points) VALUES (?, ?)', (skill, points))
                
                # Commit changes and close the connection
                conn.commit()
                conn.close()

        update_database(parsed_skills)

        def get_most_recent_course_name():
             conn = sqlite3.connect('cascade_project.db')
             cursor = conn.cursor()
             # Query the database to get the most recent course
             cursor.execute("SELECT name FROM courses ORDER BY ROWID DESC LIMIT 1")
             row = cursor.fetchone()
             conn.close()
             # Return the course if found, otherwise return None
             if row:
                
                return row[0]
             else:
                return "Test Course"

        course_name=get_most_recent_course_name()

        self.recent_course=course_name
        QTimer.singleShot(100,lambda: self.open_proficiency_dialogs(course_name))

    

    def open_proficiency_dialogs(self, course_name):
             dialog = ProficiencyDialog( parent=self.add_course_settings)
             dialog.course_name = course_name
             dialog.exec_()
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    add_course_settings = QtWidgets.QMainWindow()
    ui = Ui_add_course_settings()
    ui.setupUi(add_course_settings)
    add_course_settings.show()
    sys.exit(app.exec_())

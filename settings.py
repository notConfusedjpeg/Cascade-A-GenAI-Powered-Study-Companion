# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QLabel, QApplication, QWidget, QVBoxLayout, QMainWindow,QMessageBox, QDialog, QComboBox, QPushButton,QAbstractItemView
import resourcesCascade
from PyQt5.QtGui import QPixmap
import add_course_setting
from course_manager import CourseManager
import sqlite3
import sys
import mainpage
import initial_quiz
from PyQt5.QtCore import pyqtSignal, QObject

class Ui_settings(object):
    
    def __init__(self, main_window):
        self.main_window = main_window
        self.course_updated_signal = pyqtSignal()
        self.main_window.hide()
        self.last_course=None

    def openMainpage(self):
        self.main_window = QtWidgets.QMainWindow()
        self.ui = mainpage.Ui_mainpage()
        self.ui.setupUi(self.main_window)
        self.main_window.show() #show the mainpage
        self.main_window.raise_()
        self.main_window.activateWindow()

    def openAddCourses(self,event):
        self.window = QtWidgets.QMainWindow()
        self.ui = add_course_setting.Ui_add_course_settings()
        self.ui.setupUi(self.window)
        self.ui.settings = self
        
        def get_most_recent_course():
            conn = sqlite3.connect('cascade_project.db')
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM courses")
            course_names = cursor.fetchall()
            conn.close()
            if course_names:
                self.current_course_name = course_names[-1][0]
                return self.current_course_name
            return None
            
        self.last_course = get_most_recent_course()         
        self.window.show()

    def refresh_courses(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        
        # Fetch the course name from the table
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses")
        course_name = cursor.fetchall()

        # Clear existing course labels
        self.course1.setText("---")
        self.course2.setText("---")
        self.course3.setText("---")
        self.course4.setText("---")

        # Update course labels based on fetched data
        for i, course in enumerate(course_name):
            if i == 0:
                self.course1.setText(course[0])
            elif i == 1:
                self.course2.setText(course[0])
            elif i == 2:
                self.course3.setText(course[0])
            elif i == 3:
                self.course4.setText(course[0])
        if course_name:
            self.set_initial_quiz_box(course_name[-1][0])
        cursor.close()
        conn.close()
    
    def set_initial_quiz_box(self, last_course):
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT name, initial_user_assessment_score FROM courses ORDER BY ROWID DESC LIMIT 1")
            row = cursor.fetchone()
            if row and row[0]!=self.last_course:
                course_name = row[0]
                if row[1] is None:
                    self.initial_quiz_label.setText(f"Lets test ur actual proficiency on\n the {last_course} course!")
                    self.initial_quiz_button.setText(f"Lets Test your skills")
                    self.initial_quiz_button.setStyleSheet("QPushButton {background-color: rgb(167, 145, 203); color: white; border-radius: 5px; font: 10pt 'Montserrat';}"
                        "QPushButton:hover {color: rgb(225, 225, 225);}")
                    self.initial_quiz_box.show()
                    self.initial_quiz_label.show()
                    self.initial_quiz_button.show()
                    self.last_course=course_name
                else:
                    self.initial_quiz_box.hide()
                    self.initial_quiz_label.hide()
                    self.initial_quiz_button.hide()
            else:
                self.initial_quiz_box.hide()
                self.initial_quiz_label.hide()
                self.initial_quiz_button.hide()
        except sqlite3.Error as e:
                print(f"An error occurred: {e.args[0]}")
        finally:
                conn.close()
    
    def openQuiz(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = initial_quiz.Ui_quiz()
        self.ui.setupUi(self.window)
        self.window.show()

    def setupUi(self, settings):
        settings.setObjectName("settings")
        settings.resize(1211, 807)
        settings.setStyleSheet("background-color: rgb(27, 32, 81);")
        self.centralwidget = QtWidgets.QWidget(settings)
        self.centralwidget.setObjectName("centralwidget")
        self.initial_quiz_box = QtWidgets.QLabel(self.centralwidget)
        self.initial_quiz_box.setGeometry(QtCore.QRect(790, 550, 301, 131))
        self.initial_quiz_box.setStyleSheet("border-radius: 17px; background-color: rgb(67, 74, 138,0.5);")
        self.initial_quiz_box.setText("")
        self.initial_quiz_box.setObjectName("initial_quiz_box")
        self.initial_quiz_button = QtWidgets.QPushButton(self.centralwidget)
        self.initial_quiz_button.setGeometry(QtCore.QRect(850, 620, 181, 51))
        self.initial_quiz_button.setStyleSheet("QPushButton {\n"
"    background-color: rgba(185, 185, 185, 0);\n"
"    font: 10pt \"Montserrat\";\n"
"    color: rgb(154, 154, 154);\n"
"    border-radius: 5px;\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    color: rgb(195, 195, 195);\n"
"}\n"
"")
        self.initial_quiz_button.setObjectName("initial_quiz_button")
        self.initial_quiz_button.setText("")
        self.initial_quiz_button.clicked.connect(self.openQuiz)

        self.initial_quiz_label = QtWidgets.QLabel(self.centralwidget)
        self.initial_quiz_label.setGeometry(QtCore.QRect(800, 560, 281, 51))
        self.initial_quiz_label.setStyleSheet("background: transparent;\n"
"font: 10pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"")
        self.initial_quiz_label.setObjectName("initial_quiz_label")
        self.initial_quiz_label.setText("")

        self.initial_quiz_box.hide()
        self.initial_quiz_label.hide()
        self.initial_quiz_button.hide()
        self.bg = QtWidgets.QLabel(self.centralwidget)
        self.bg.setGeometry(QtCore.QRect(0, 0, 1221, 801))
        self.bg.setText("")
        self.bg.setPixmap(QPixmap(":/images/images for cascade/bg_image.png"))
        self.bg.setScaledContents(True)
        self.bg.setObjectName("bg")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(20, 20, 61, 61))
        self.logo.setStyleSheet("background-color: rgb(99, 106, 154);\n"
"border-radius: 10px;\n"
"padding: 5px;\n"
"box-shadow: 10px 10px 5px rgba(0, 0, 0, 1);")
        self.logo.setText("")
        self.logo.setPixmap(QPixmap(":/images/images for cascade/Cascade-removebg-preview.png"))
        self.logo.setScaledContents(True)
        self.logo.setObjectName("logo")
        self.logo_bg_shadow = QtWidgets.QLabel(self.centralwidget)
        self.logo_bg_shadow.setGeometry(QtCore.QRect(25, 25, 61, 61))
        self.logo_bg_shadow.setStyleSheet("background-color: rgb(23, 35, 67);\n"
"border-radius: 10px;\n"
"")
        self.logo_bg_shadow.setText("")
        self.logo_bg_shadow.setObjectName("logo_bg_shadow")
        self.intro_nav = QtWidgets.QLabel(self.centralwidget)
        self.intro_nav.setGeometry(QtCore.QRect(570, 20, 101, 41))
        self.intro_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.intro_nav.setObjectName("intro_nav")
        self.studyplan_nav = QtWidgets.QLabel(self.centralwidget)
        self.studyplan_nav.setGeometry(QtCore.QRect(680, 20, 81, 41))
        self.studyplan_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.studyplan_nav.setObjectName("studyplan_nav")
        self.calender_nav = QtWidgets.QLabel(self.centralwidget)
        self.calender_nav.setGeometry(QtCore.QRect(770, 20, 71, 41))
        self.calender_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.calender_nav.setObjectName("calender_nav")
        self.stats_nav = QtWidgets.QLabel(self.centralwidget)
        self.stats_nav.setGeometry(QtCore.QRect(850, 20, 61, 41))
        self.stats_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.stats_nav.setObjectName("stats_nav")
        self.faq_nav = QtWidgets.QLabel(self.centralwidget)
        self.faq_nav.setGeometry(QtCore.QRect(930, 20, 41, 41))
        self.faq_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.faq_nav.setObjectName("faq_nav")
        self.about_nav = QtWidgets.QLabel(self.centralwidget)
        self.about_nav.setGeometry(QtCore.QRect(990, 20, 41, 41))
        self.about_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.about_nav.setObjectName("about_nav")
        self.contact_nav = QtWidgets.QLabel(self.centralwidget)
        self.contact_nav.setGeometry(QtCore.QRect(1050, 20, 51, 41))
        self.contact_nav.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"color: rgb(255, 255, 255);\n"
"font: 8pt \"Montserrat\";")
        self.contact_nav.setObjectName("contact_nav")
        self.nav_line = QtWidgets.QLabel(self.centralwidget)
        self.nav_line.setGeometry(QtCore.QRect(550, 60, 551, 1))
        self.nav_line.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line.setText("")
        self.nav_line.setObjectName("nav_line")
        self.homepage = QtWidgets.QPushButton(self.centralwidget)
        self.homepage.setGeometry(QtCore.QRect(1120, 30, 31, 28))
        self.homepage.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 14px;")
        self.homepage.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QPixmap(":/images/images for cascade/homepage_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.homepage.setIcon(icon)
        self.homepage.setObjectName("homepage")
        self.homepage.clicked.connect(lambda: (self.openMainpage(), settings.hide()))
        self.help = QtWidgets.QPushButton(self.centralwidget)
        self.help.setGeometry(QtCore.QRect(1160, 30, 31, 28))
        self.help.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 14px;")
        self.help.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QPixmap(":/images/images for cascade/help.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.help.setIcon(icon1)
        self.help.setObjectName("help")
        self.main_box = QtWidgets.QLabel(self.centralwidget)
        self.main_box.setGeometry(QtCore.QRect(60, 120, 1091, 611))
        self.main_box.setStyleSheet("border-radius: 17px;\n"
"background-color: rgb(167, 145, 203,0.2);")
        self.main_box.setText("")
        self.main_box.setObjectName("main_box")
        
        self.domainbox = QtWidgets.QLabel(self.centralwidget)
        self.domainbox.setGeometry(QtCore.QRect(680, 255, 421, 151))
        self.domainbox.setStyleSheet("border-radius: 17px; background-color: rgb(67, 74, 138,0.5);")
        self.domainbox.setText("")
        self.domainbox.setObjectName("main_box")

        self.coursebox = QtWidgets.QLabel(self.centralwidget)
        self.coursebox.setGeometry(QtCore.QRect(110, 253, 481, 421))
        self.coursebox.setStyleSheet("border-radius: 17px; background-color: rgb(67, 74, 138,0.5);")
        self.coursebox.setText("")
        self.coursebox.setObjectName("main_box")

        self.main_box_2 = QtWidgets.QLabel(self.centralwidget)
        self.main_box_2.setGeometry(QtCore.QRect(90, 150, 1031, 551))
        self.main_box_2.setStyleSheet("border-radius: 17px;\n"
"background-color: rgb(0, 0, 0,0.6);")
        self.main_box_2.setText("")
        self.main_box_2.setObjectName("main_box_2")
        self.settings_title = QtWidgets.QLabel(self.centralwidget)
        self.settings_title.setGeometry(QtCore.QRect(910, 170, 181, 61))
        self.settings_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.settings_title.setStyleSheet("background: transparent;\n"
"font: 25pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignRight;\n"
"")
        self.settings_title.setObjectName("settings_title")
        self.nav_line_2 = QtWidgets.QLabel(self.centralwidget)
        self.nav_line_2.setGeometry(QtCore.QRect(699, 234, 400, 1))
        self.nav_line_2.setStyleSheet("\n"
"background: qlineargradient(x1:0, y1:0, x2:1, y2:0,\n"
"    stop:0 rgba(255, 255, 255, 0),\n"
"    stop:1 rgba(255, 255, 255, 200));")
        self.nav_line_2.setText("")
        self.nav_line_2.setObjectName("nav_line_2")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(120, 250, 461, 431))
        self.widget.setStyleSheet("background: transparent;")
        self.widget.setObjectName("widget")
        self.courses_title = QtWidgets.QLabel(self.widget)
        self.courses_title.setGeometry(QtCore.QRect(10, 10, 181, 61))
        self.courses_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.courses_title.setStyleSheet("background: transparent;\n"
"font: 23pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignLeft;\n"
"")
        self.courses_title.setObjectName("courses_title")

        self.domain_title = QtWidgets.QLabel(self.centralwidget)
        self.domain_title.setGeometry(QtCore.QRect(930, 260, 191, 61))
        self.domain_title.setStyleSheet("background: transparent;\n"
"font: 23pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignLeft;\n"
"")
        self.domain_title.setText("Domain")
        self.domain_title.setObjectName("domain_title")
        self.dropdown = QtWidgets.QComboBox(settings)
        self.dropdown.setGeometry(QtCore.QRect(890, 320, 201, 41))
        self.dropdown.addItem("Select your domain")
        self.dropdown.addItems(["Computer Science", "Mathematics", "Physics", "Biology", "Commerce"])

        # Connect the signal to the slot
        self.dropdown.activated.connect(self.remove_placeholder)

        self.dropdown.setStyleSheet("""
QComboBox {
    font: 10pt "Montserrat";
    background-color: rgb(167, 145, 203);
    color: rgb(255, 255, 255);
    font-weight: 500;
}

QComboBox:on {
    background-color: rgb(167, 145, 203); 
}

QComboBox QListView {
    background-color: rgb(167, 145, 203); 
    color: rgb(255, 255, 255); 
    border: 1px solid rgb(100, 100, 100); 
}

QComboBox QListView::item {
    background-color: transparent; 
    color: rgb(255, 255, 255); 
}

""")


        self.dropdown.currentIndexChanged.connect(self.handle_selection_change)
        self.load_choice()

        self.course1 = QtWidgets.QLabel(self.widget)
        self.course1.setGeometry(QtCore.QRect(50, 100, 321, 31))
        self.course1.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 10pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.course1.setObjectName("course1")
        self.course2 = QtWidgets.QLabel(self.widget)
        self.course2.setGeometry(QtCore.QRect(50, 140, 321, 31))
        self.course2.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 10pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.course2.setObjectName("course2")
        self.course3 = QtWidgets.QLabel(self.widget)
        self.course3.setGeometry(QtCore.QRect(50, 190, 321, 31))
        self.course3.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 10pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.course3.setObjectName("course3")
        self.course4 = QtWidgets.QLabel(self.widget)
        self.course4.setGeometry(QtCore.QRect(50, 240, 321, 31))
        self.course4.setStyleSheet("background-color: rgb(255, 255, 255,0);\n"
"font: 10pt \"Montserrat\";\n"
"color: rgb(195, 195, 195);")
        self.course4.setObjectName("course4")
        self.delete_course_button = QtWidgets.QLabel(self.widget)
        self.delete_course_button.mousePressEvent = self.delete_course
        self.delete_course_button.setGeometry(QtCore.QRect(430, 10, 41, 51))
        self.delete_course_button.setStyleSheet("background-color: rgb(255, 255, 255,0);")
        self.delete_course_button.setText("")
        self.delete_course_button.setPixmap(QtGui.QPixmap(":/images/images for cascade/delete_note_icon.png"))
        self.delete_course_button.setObjectName("delete_course_button")
        self.add_course_button = QtWidgets.QLabel(self.widget)
        self.add_course_button.mousePressEvent = self.openAddCourses
        self.add_course_button.setGeometry(QtCore.QRect(380, 20, 31, 31))
        self.add_course_button.setStyleSheet("QLabel{\n"
"    background-color: rgb(255, 255, 255,0);\n"
"}\n"
"\n"
"QLabel:hover {\n"
"    color: rgb(142, 123, 173);\n"
"}\n"
"")
        self.add_course_button.setText("")
        self.add_course_button.setPixmap(QPixmap(":/images/images for cascade/create_note_icon.png"))
        self.add_course_button.setScaledContents(True)
        self.add_course_button.setObjectName("add_course_button")
        self.view_more_courses = QtWidgets.QPushButton(self.widget)
        self.view_more_courses.setGeometry(QtCore.QRect(330, 290, 93, 28))
        self.view_more_courses.setStyleSheet("QPushButton {\n"
"    background-color: rgba(185, 185, 185, 0);\n"
"    font: 8pt \"Montserrat\";\n"
"    color: rgb(154, 154, 154);\n"
"    border-radius: 5px;\n"
"   \n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    color: rgb(195, 195, 195);\n"
"}\n"
"")
        self.view_more_courses.setObjectName("view_more_courses")
        QtCore.QMetaObject.connectSlotsByName(settings)
        self.bg.raise_()
        self.logo_bg_shadow.raise_()
        self.logo.raise_()
        self.intro_nav.raise_()
        self.studyplan_nav.raise_()
        self.calender_nav.raise_()
        self.stats_nav.raise_()
        self.faq_nav.raise_()
        self.about_nav.raise_()
        self.contact_nav.raise_()
        self.nav_line.raise_()
        self.homepage.raise_()
        self.help.raise_()
        self.main_box.raise_()
        self.main_box_2.raise_()
        self.initial_quiz_box.raise_()
        self.initial_quiz_button.raise_()
        self.initial_quiz_label.raise_()
        self.settings_title.raise_()
        self.nav_line_2.raise_()
        self.coursebox.raise_()
        self.widget.raise_()
        self.domainbox.raise_()
        self.domain_title.raise_()
        settings.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(settings)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1211, 26))
        self.menubar.setObjectName("menubar")
        settings.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(settings)
        self.statusbar.setObjectName("statusbar")
        settings.setStatusBar(self.statusbar)

        self.retranslateUi(settings)
        QtCore.QMetaObject.connectSlotsByName(settings)

    def retranslateUi(self, settings):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon(":/images/images for cascade/settings.png")
        settings.setWindowIcon(icon)
        settings.setWindowTitle(_translate("settings", "Settings"))
        self.intro_nav.setText(_translate("settings", "Introduction"))
        self.studyplan_nav.setText(_translate("settings", "Study Plan"))
        self.calender_nav.setText(_translate("settings", "Calendar"))
        self.stats_nav.setText(_translate("settings", "Statistics"))
        self.faq_nav.setText(_translate("settings", "FAQ\'s"))
        self.about_nav.setText(_translate("settings", "About "))
        self.contact_nav.setText(_translate("settings", "Contact"))
        self.settings_title.setText(_translate("settings", "Settings"))
        self.courses_title.setText(_translate("settings", "Courses"))
        self.domain_title.setText(_translate("settings", "Domain"))
        self.course1.setText(_translate("settings", "---"))
        self.course2.setText(_translate("settings", "---"))
        self.course3.setText(_translate("settings", "---"))
        self.course4.setText(_translate("settings", "---"))
        self.view_more_courses.setText(_translate("settings", "View more "))

        self.display_coursename()

    def remove_placeholder(self):
        # Check if the current item is the placeholder
        if self.dropdown.currentText() == "Select a course":
            return  # Do nothing if the placeholder is selected

        # Remove the placeholder item if it's still present
        if self.dropdown.findText("Select a course") != -1:
            self.dropdown.removeItem(0)

    def display_coursename(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        
        # Fetch the course name from the table
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses")
        course_name = cursor.fetchall()
                
        for i in range(len(course_name)):
            # Check if a course name was fetched
            if course_name[i]:
                # Dynamically set the course name to the label
                getattr(self, 'course' + str(i+1)).setText(course_name[i][0])
            else:
                break

        cursor.close()
        conn.close()

    def handle_selection_change(self, index):
        selected_domain = self.dropdown.currentText()
        if selected_domain != "Select your domain":
            self.store_choice(selected_domain)

    def store_choice(self, selected_domain):
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        # Check if there is already a selection
        cursor.execute("SELECT * FROM user_choice")
        row = cursor.fetchone()
        
        if row:
                # Update the existing entry
                cursor.execute("UPDATE user_choice SET domain = ?", (selected_domain,))
        else:
                # Insert a new entry
                cursor.execute("INSERT INTO user_choice (domain) VALUES (?)", (selected_domain,))
        
        conn.commit()  # Commit changes to the database
        conn.close()

    def load_choice(self):
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        cursor.execute("SELECT domain FROM user_choice ORDER BY id DESC LIMIT 1")
        row = cursor.fetchone()
        if row:
            self.dropdown.setCurrentText(row[0])
        conn.close()

    def delete_course(self, event):
        """Opens a dialog to choose a course for deletion."""
        # Create a dialog box
        dialog = QDialog(self.widget)
        dialog.setWindowTitle("Delete Course")
        dialog.setStyleSheet("background-color: rgb(167, 145, 203); color: rgb(255,255,255); font: 10pt 'Montserrat';")

        # Create a layout for the dialog
        layout = QVBoxLayout()

        # Create a label for the dropdown
        label = QLabel("Select Course to Delete:")
        label.setStyleSheet("background-color: rgb(167, 145, 203); color: rgb(255,255,255); font: 10pt 'Montserrat';")
        layout.addWidget(label)

        # Create a combobox for course selection
        self.course_dropdown = QComboBox(dialog)
        self.populate_course_dropdown()  # Populate with courses from database
        layout.addWidget(self.course_dropdown)

        # Create an OK button
        ok_button = QPushButton("OK")
        ok_button.clicked.connect(lambda: self.confirm_delete(dialog))
        layout.addWidget(ok_button)

        # Set the layout for the dialog
        dialog.setLayout(layout)

        # Show the dialog
        dialog.exec_()

    def populate_course_dropdown(self):
        """Fills the course dropdown with data from the database."""
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM courses")
        courses = cursor.fetchall()
        conn.close()

        self.course_dropdown.addItems([course[0] for course in courses])

    def confirm_delete(self, dialog):
        """Confirms the deletion and updates the GUI."""
        selected_course = self.course_dropdown.currentText()

        if selected_course:
            msg_box = CustomMessageBox(self.widget)
            msg_box.setWindowTitle("Confirm Delete") 
            msg_box.setIcon(QMessageBox.Question)
            msg_box.setText(f'Are you sure you want to delete {selected_course}?')
            msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
            msg_box.button(QMessageBox.Yes).setFixedSize(150, 40) 
            msg_box.button(QMessageBox.No).setFixedSize(150, 40)
            msg_box.setDefaultButton(QMessageBox.No)
            reply = msg_box.exec_()

            if reply == QMessageBox.Yes:
                # Connect to the database
                conn = sqlite3.connect('cascade_project.db')
                cursor = conn.cursor()

                # Delete the course from the database
                cursor.execute("DELETE FROM courses WHERE name = ?", (selected_course,))
                conn.commit()
                conn.close()

                # Update the GUI
                self.refresh_courses() # Refresh the course names
                dialog.close()  # Close the dialog box
        else:
            QMessageBox.warning(self.widget, "Error", "Please select a course to delete.")

        
    def update_courses(self):
        """Emits the course_updated_signal to trigger a refresh."""
        self.course_updated_signal.emit()

class CustomMessageBox(QMessageBox):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setStyleSheet("""
            QMessageBox {
                background-color: rgb(167, 145, 203);
                color: rgb(225,225,225);
            }
            QMessageBox QLabel {
                font: 10pt "Montserrat";
                color: rgb(225,225,225);
            }
            QMessageBox QPushButton {
                background-color: rgb(187, 165, 223);
                color: white;
                border-radius: 5px;
                font-weight:500;
            }
        """)
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    settings = QtWidgets.QMainWindow()
    ui = Ui_settings(settings)
    ui.setupUi(settings)
    settings.show()
    sys.exit(app.exec_())